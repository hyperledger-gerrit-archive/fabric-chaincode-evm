// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/http"
	"sync"

	"github.com/hyperledger/fabric-chaincode-evm/fabproxy"
)

type MockEthService struct {
	GetCodeStub        func(r *http.Request, arg *string, reply *string) error
	getCodeMutex       sync.RWMutex
	getCodeArgsForCall []struct {
		r     *http.Request
		arg   *string
		reply *string
	}
	getCodeReturns struct {
		result1 error
	}
	getCodeReturnsOnCall map[int]struct {
		result1 error
	}
	CallStub        func(r *http.Request, args *fabproxy.EthArgs, reply *string) error
	callMutex       sync.RWMutex
	callArgsForCall []struct {
		r     *http.Request
		args  *fabproxy.EthArgs
		reply *string
	}
	callReturns struct {
		result1 error
	}
	callReturnsOnCall map[int]struct {
		result1 error
	}
	SendTransactionStub        func(r *http.Request, args *fabproxy.EthArgs, reply *string) error
	sendTransactionMutex       sync.RWMutex
	sendTransactionArgsForCall []struct {
		r     *http.Request
		args  *fabproxy.EthArgs
		reply *string
	}
	sendTransactionReturns struct {
		result1 error
	}
	sendTransactionReturnsOnCall map[int]struct {
		result1 error
	}
	GetTransactionReceiptStub        func(r *http.Request, arg *string, reply *fabproxy.TxReceipt) error
	getTransactionReceiptMutex       sync.RWMutex
	getTransactionReceiptArgsForCall []struct {
		r     *http.Request
		arg   *string
		reply *fabproxy.TxReceipt
	}
	getTransactionReceiptReturns struct {
		result1 error
	}
	getTransactionReceiptReturnsOnCall map[int]struct {
		result1 error
	}
	AccountsStub        func(r *http.Request, arg *string, reply *[]string) error
	accountsMutex       sync.RWMutex
	accountsArgsForCall []struct {
		r     *http.Request
		arg   *string
		reply *[]string
	}
	accountsReturns struct {
		result1 error
	}
	accountsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MockEthService) GetCode(r *http.Request, arg *string, reply *string) error {
	fake.getCodeMutex.Lock()
	ret, specificReturn := fake.getCodeReturnsOnCall[len(fake.getCodeArgsForCall)]
	fake.getCodeArgsForCall = append(fake.getCodeArgsForCall, struct {
		r     *http.Request
		arg   *string
		reply *string
	}{r, arg, reply})
	fake.recordInvocation("GetCode", []interface{}{r, arg, reply})
	fake.getCodeMutex.Unlock()
	if fake.GetCodeStub != nil {
		return fake.GetCodeStub(r, arg, reply)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getCodeReturns.result1
}

func (fake *MockEthService) GetCodeCallCount() int {
	fake.getCodeMutex.RLock()
	defer fake.getCodeMutex.RUnlock()
	return len(fake.getCodeArgsForCall)
}

func (fake *MockEthService) GetCodeArgsForCall(i int) (*http.Request, *string, *string) {
	fake.getCodeMutex.RLock()
	defer fake.getCodeMutex.RUnlock()
	return fake.getCodeArgsForCall[i].r, fake.getCodeArgsForCall[i].arg, fake.getCodeArgsForCall[i].reply
}

func (fake *MockEthService) GetCodeReturns(result1 error) {
	fake.GetCodeStub = nil
	fake.getCodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) GetCodeReturnsOnCall(i int, result1 error) {
	fake.GetCodeStub = nil
	if fake.getCodeReturnsOnCall == nil {
		fake.getCodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getCodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) Call(r *http.Request, args *fabproxy.EthArgs, reply *string) error {
	fake.callMutex.Lock()
	ret, specificReturn := fake.callReturnsOnCall[len(fake.callArgsForCall)]
	fake.callArgsForCall = append(fake.callArgsForCall, struct {
		r     *http.Request
		args  *fabproxy.EthArgs
		reply *string
	}{r, args, reply})
	fake.recordInvocation("Call", []interface{}{r, args, reply})
	fake.callMutex.Unlock()
	if fake.CallStub != nil {
		return fake.CallStub(r, args, reply)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.callReturns.result1
}

func (fake *MockEthService) CallCallCount() int {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return len(fake.callArgsForCall)
}

func (fake *MockEthService) CallArgsForCall(i int) (*http.Request, *fabproxy.EthArgs, *string) {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return fake.callArgsForCall[i].r, fake.callArgsForCall[i].args, fake.callArgsForCall[i].reply
}

func (fake *MockEthService) CallReturns(result1 error) {
	fake.CallStub = nil
	fake.callReturns = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) CallReturnsOnCall(i int, result1 error) {
	fake.CallStub = nil
	if fake.callReturnsOnCall == nil {
		fake.callReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.callReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) SendTransaction(r *http.Request, args *fabproxy.EthArgs, reply *string) error {
	fake.sendTransactionMutex.Lock()
	ret, specificReturn := fake.sendTransactionReturnsOnCall[len(fake.sendTransactionArgsForCall)]
	fake.sendTransactionArgsForCall = append(fake.sendTransactionArgsForCall, struct {
		r     *http.Request
		args  *fabproxy.EthArgs
		reply *string
	}{r, args, reply})
	fake.recordInvocation("SendTransaction", []interface{}{r, args, reply})
	fake.sendTransactionMutex.Unlock()
	if fake.SendTransactionStub != nil {
		return fake.SendTransactionStub(r, args, reply)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendTransactionReturns.result1
}

func (fake *MockEthService) SendTransactionCallCount() int {
	fake.sendTransactionMutex.RLock()
	defer fake.sendTransactionMutex.RUnlock()
	return len(fake.sendTransactionArgsForCall)
}

func (fake *MockEthService) SendTransactionArgsForCall(i int) (*http.Request, *fabproxy.EthArgs, *string) {
	fake.sendTransactionMutex.RLock()
	defer fake.sendTransactionMutex.RUnlock()
	return fake.sendTransactionArgsForCall[i].r, fake.sendTransactionArgsForCall[i].args, fake.sendTransactionArgsForCall[i].reply
}

func (fake *MockEthService) SendTransactionReturns(result1 error) {
	fake.SendTransactionStub = nil
	fake.sendTransactionReturns = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) SendTransactionReturnsOnCall(i int, result1 error) {
	fake.SendTransactionStub = nil
	if fake.sendTransactionReturnsOnCall == nil {
		fake.sendTransactionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendTransactionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) GetTransactionReceipt(r *http.Request, arg *string, reply *fabproxy.TxReceipt) error {
	fake.getTransactionReceiptMutex.Lock()
	ret, specificReturn := fake.getTransactionReceiptReturnsOnCall[len(fake.getTransactionReceiptArgsForCall)]
	fake.getTransactionReceiptArgsForCall = append(fake.getTransactionReceiptArgsForCall, struct {
		r     *http.Request
		arg   *string
		reply *fabproxy.TxReceipt
	}{r, arg, reply})
	fake.recordInvocation("GetTransactionReceipt", []interface{}{r, arg, reply})
	fake.getTransactionReceiptMutex.Unlock()
	if fake.GetTransactionReceiptStub != nil {
		return fake.GetTransactionReceiptStub(r, arg, reply)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getTransactionReceiptReturns.result1
}

func (fake *MockEthService) GetTransactionReceiptCallCount() int {
	fake.getTransactionReceiptMutex.RLock()
	defer fake.getTransactionReceiptMutex.RUnlock()
	return len(fake.getTransactionReceiptArgsForCall)
}

func (fake *MockEthService) GetTransactionReceiptArgsForCall(i int) (*http.Request, *string, *fabproxy.TxReceipt) {
	fake.getTransactionReceiptMutex.RLock()
	defer fake.getTransactionReceiptMutex.RUnlock()
	return fake.getTransactionReceiptArgsForCall[i].r, fake.getTransactionReceiptArgsForCall[i].arg, fake.getTransactionReceiptArgsForCall[i].reply
}

func (fake *MockEthService) GetTransactionReceiptReturns(result1 error) {
	fake.GetTransactionReceiptStub = nil
	fake.getTransactionReceiptReturns = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) GetTransactionReceiptReturnsOnCall(i int, result1 error) {
	fake.GetTransactionReceiptStub = nil
	if fake.getTransactionReceiptReturnsOnCall == nil {
		fake.getTransactionReceiptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getTransactionReceiptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) Accounts(r *http.Request, arg *string, reply *[]string) error {
	fake.accountsMutex.Lock()
	ret, specificReturn := fake.accountsReturnsOnCall[len(fake.accountsArgsForCall)]
	fake.accountsArgsForCall = append(fake.accountsArgsForCall, struct {
		r     *http.Request
		arg   *string
		reply *[]string
	}{r, arg, reply})
	fake.recordInvocation("Accounts", []interface{}{r, arg, reply})
	fake.accountsMutex.Unlock()
	if fake.AccountsStub != nil {
		return fake.AccountsStub(r, arg, reply)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.accountsReturns.result1
}

func (fake *MockEthService) AccountsCallCount() int {
	fake.accountsMutex.RLock()
	defer fake.accountsMutex.RUnlock()
	return len(fake.accountsArgsForCall)
}

func (fake *MockEthService) AccountsArgsForCall(i int) (*http.Request, *string, *[]string) {
	fake.accountsMutex.RLock()
	defer fake.accountsMutex.RUnlock()
	return fake.accountsArgsForCall[i].r, fake.accountsArgsForCall[i].arg, fake.accountsArgsForCall[i].reply
}

func (fake *MockEthService) AccountsReturns(result1 error) {
	fake.AccountsStub = nil
	fake.accountsReturns = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) AccountsReturnsOnCall(i int, result1 error) {
	fake.AccountsStub = nil
	if fake.accountsReturnsOnCall == nil {
		fake.accountsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.accountsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MockEthService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCodeMutex.RLock()
	defer fake.getCodeMutex.RUnlock()
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	fake.sendTransactionMutex.RLock()
	defer fake.sendTransactionMutex.RUnlock()
	fake.getTransactionReceiptMutex.RLock()
	defer fake.getTransactionReceiptMutex.RUnlock()
	fake.accountsMutex.RLock()
	defer fake.accountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MockEthService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fabproxy.EthService = new(MockEthService)
