/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package event_test

import (
	"context"
	"errors"
	"fmt"

	"github.com/hyperledger/burrow/account"
	"github.com/hyperledger/burrow/event"
	"github.com/hyperledger/burrow/execution/evm/events"
	evm_event "github.com/hyperledger/fabric-chaincode-evm/event"
	"github.com/hyperledger/fabric-chaincode-evm/mocks"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Event", func() {

	var (
		em        evm_event.EventManager
		mockStub  *mocks.MockStub
		addr      account.Address
		publisher event.Publisher
	)

	BeforeEach(func() {
		mockStub = &mocks.MockStub{}
		em = *evm_event.NewEventManager(mockStub, publisher)

		var err error
		addr, err = account.AddressFromBytes([]byte("0000000000000address"))
		Expect(err).ToNot(HaveOccurred())
	})

	Describe("Publish", func() {
		var (
			ctx     context.Context
			message interface{}
			tags    map[string]interface{}
		)

		BeforeEach(func() {
			ctx = context.Background()
			message = events.EventDataLog{
				Address: addr,
				Height:  0,
			}
			tags = make(map[string]interface{})
			tags = map[string]interface{}{"EventID": fmt.Sprintf("Log/%s", addr)}
		})

		It("appends the new message info into the eventCache", func() {
			err := em.Publish(ctx, message, tags)
			Expect(err).ToNot(HaveOccurred())
		})
	})

	Describe("Flush", func() {
		var (
			ctx      context.Context
			message1 interface{}
			message2 interface{}
			tags     map[string]interface{}
			payload1 []byte
			payload2 []byte
		)

		BeforeEach(func() {
			ctx = context.Background()
			message1 = events.EventDataLog{
				Address: addr,
				Height:  0,
			}
			message2 = events.EventDataLog{
				Address: addr,
				Height:  1,
			}
			tags = make(map[string]interface{})
			tags = map[string]interface{}{"EventID": fmt.Sprintf("Log/%s", addr)}
			payload1 = []byte{0x5b, 0x7b, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x22, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x36, 0x31, 0x36, 0x34, 0x36, 0x34, 0x37, 0x32, 0x36, 0x35, 0x37, 0x33, 0x37, 0x33, 0x22, 0x2c, 0x22, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x22, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x22, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x5d}
			payload2 = []byte{0x5b, 0x7b, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x22, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x36, 0x31, 0x36, 0x34, 0x36, 0x34, 0x37, 0x32, 0x36, 0x35, 0x37, 0x33, 0x37, 0x33, 0x22, 0x2c, 0x22, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x22, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x22, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x22, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x36, 0x31, 0x36, 0x34, 0x36, 0x34, 0x37, 0x32, 0x36, 0x35, 0x37, 0x33, 0x37, 0x33, 0x22, 0x2c, 0x22, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x22, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x22, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3a, 0x31, 0x7d, 0x7d, 0x5d}
		})

		Context("when a single event is emitted", func() {
			It("sets a new event with a single messageInfo object payload", func() {
				err := em.Publish(ctx, message1, tags)
				Expect(err).ToNot(HaveOccurred())
				er := em.Flush("Chaincode event")
				Expect(er).ToNot(HaveOccurred())
				n, p := mockStub.SetEventArgsForCall(0)
				Expect(n).To(Equal("Chaincode event"))
				Expect(p).To(Equal(payload1))
				Expect(mockStub.SetEventCallCount()).To(Equal(1))
			})
		})

		Context("when multiple events are emitted", func() {
			It("sets a new event with a payload consisting of messageInfo objects marshaled together", func() {
				err := em.Publish(ctx, message1, tags)
				Expect(err).ToNot(HaveOccurred())
				err1 := em.Publish(ctx, message2, tags)
				Expect(err1).ToNot(HaveOccurred())
				er := em.Flush("Chaincode event")
				Expect(er).ToNot(HaveOccurred())
				n, p := mockStub.SetEventArgsForCall(0)
				Expect(n).To(Equal("Chaincode event"))
				Expect(p).To(Equal(payload2))
				Expect(mockStub.SetEventCallCount()).To(Equal(1))
			})
		})

		Context("when an error occurs", func() {
			Context("due to problems in marshaling event messages", func() {
				It("returns an error", func() {
					msg1 := make(chan events.EventDataLog)
					err := em.Publish(ctx, msg1, tags)
					Expect(err).ToNot(HaveOccurred())
					er := em.Flush("Chaincode event")
					Expect(er).To(HaveOccurred())
				})
			})

			Context("due to invalid event name (nil string)", func() {
				BeforeEach(func() {
					mockStub.SetEventReturns(errors.New("error: nil event name"))
				})

				It("returns an error", func() {
					err := em.Publish(ctx, message1, tags)
					Expect(err).ToNot(HaveOccurred())
					err1 := em.Publish(ctx, message2, tags)
					Expect(err1).ToNot(HaveOccurred())
					er := em.Flush("")
					Expect(er).To(HaveOccurred())
				})
			})
		})
	})
})
